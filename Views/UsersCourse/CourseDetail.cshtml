@model FliesProject.ViewModel.CourseDetailViewModel


@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trang Chủ</title>
    <link rel="stylesheet" href="~/css/user/Styles.css" asp-append-version="true">
    <link rel="stylesheet" href="~/css/user/Header.css" asp-append-version="true">
    <link href="~/css/Course/CourseDetail.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

    <style>
        .video-container {
            position: relative;
            max-width: 800px;
            margin: 20px auto;
            background-color: #000;
        }

        .video-controls {
            background-color: rgba(0, 0, 0, 0.7);
            padding: 10px;
            position: absolute;
            bottom: 0;
            width: 100%;
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            transition: opacity 0.5s;
        }

        .video-container:hover .video-controls {
            opacity: 1;
        }

        .progress-container {
            flex: 1 0 100%;
            height: 5px;
            background-color: rgba(255, 255, 255, 0.2);
            margin-bottom: 10px;
            cursor: pointer;
        }

        .progress-bar {
            height: 100%;
            background-color: #0d6efd;
            width: 0%;
        }

        .time-display {
            color: white;
            margin: 0 10px;
            font-size: 0.9rem;
        }

        .control-buttons {
            display: flex;
            align-items: center;
        }

        .volume-control {
            width: 80px;
            margin: 0 10px;
        }
    </style>



</head>

<body>
    <header>
        <div class="header">
            <div class="header-left">
                <img src="~/images/user/logo.jpg" alt="Logo" class="logo">
                <div class="search-container">
                    <i class="fa fa-search search-icon"></i>
                    <input type="text" class="search-box" placeholder="Tìm kiếm khóa học bạn mong muốn...">
                </div>
            </div>
            <div class="header-right">
                <div class="auth-links" id="authLinks">
                    <a href="javascript:void(0);" id="loginLink">Đăng nhập</a>
                    <a href="javascript:void(0);" id="signupLink">Đăng ký</a>
                </div>
                <a href="#" class="google-login" id="googleLogin">
                    <i class="fab fa-google"></i> Login with Google
                </a>
                <div class="user-info" id="userInfo" style="display: none;">
                    <div class="user-avatar-container">
                        <i class="bi bi-bell notification-icon">
                            <span id="notificationCount" class="notification-badge">3</span>
                        </i>
                        <img src="~/images/user/avatar.jpg" alt="Avatar" class="user-avatar">
                        <span id="userName" class="user-name"></span>
                    </div>
                    <div class="logout-container">
                        <button id="logoutButton" class="logout-button">Đăng xuất</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="nav-bar">
            <a asp-area="" asp-controller="Account" asp-action="Home"><i class="fas fa-home"></i> Home</a>
            <div class="dropdown">
                <a asp-area="" asp-controller="UsersCourse" asp-action="CourseOverview"><i class="fas fa-book"></i> Khóa Học Dinosaur <i class="fas fa-chevron-down"></i></a>
                <div class="dropdown-content">
                    <a href="#">Lựa chọn 1</a>
                    <a href="#">Lựa chọn 2</a>
                    <a href="#">Lựa chọn 3</a>

                </div>
            </div>
            <div class="dropdown">
                <a href="#"><i class="fas fa-pencil-alt"></i> Luyện Writing AI, Reading, Listening <i class="fas fa-chevron-down"></i></a>
                <div class="dropdown-content">
                    <a href="#">Lựa chọn 1</a>
                    <a href="#">Lựa chọn 2</a>
                    <a href="#">Lựa chọn 3</a>
                </div>
            </div>
            <div class="dropdown">
                <a href="#"><i class="fas fa-file-alt"></i> Bài Mẫu 8.0 + <i class="fas fa-chevron-down"></i></a>
                <div class="dropdown-content">
                    <a href="#">Lựa chọn 1</a>
                    <a href="#">Lựa chọn 2</a>
                    <a href="#">Lựa chọn 3</a>
                </div>
            </div>
            <a asp-area="" asp-controller="Account" asp-action="Dinosaur"><i class="fas fa-info-circle"></i> Dinosaur là gì ?</a>
        </div>
    </header>

    <!-- Popup for login -->
    <div class="popup" id="authPopup">
        <div class="popup-content">
            <button class="close-btn" onclick="closePopup('authPopup')">&times;</button>
            <h2 id="popupTitle">Đăng nhập</h2>
            <input type="text" id="username" placeholder="Tên đăng nhập" />
            <input type="password" id="password" placeholder="Mật khẩu" />
            <button id="submitBtn" onclick="login()">Đăng nhập</button>
            <div style="margin-top: 10px; text-align: center;">
                <span onclick="switchPopup('authPopup', 'signupPopup')" style="cursor: pointer; color: #0066B3;">
                    Chưa có tài khoản? Quên mật khẩu
                </span>
            </div>
        </div>
    </div>

    <!-- Popup for signup -->
    <div class="popup" id="signupPopup">
        <div class="popup-content">
            <button class="close-btn" onclick="closePopup('signupPopup')">&times;</button>
            <h2>Đăng ký</h2>
            @* IMPORTANT: This form needs to post to the correct controller action - Removed class="popup" from form *@
            <form asp-controller="Account" asp-action="Register" method="post" id="signupForm">
                @* Add AntiForgeryToken for security *@
                @Html.AntiForgeryToken()

                @* Use placeholder attributes like the example.
                Input names MUST match the RegisterViewModel properties (Username, Email, Password, ConfirmPassword) *@
                <input name="Username" type="text" placeholder="Tên đăng nhập" required />
                @* Add validation message placeholders if needed, or rely on summary *@

                <input name="Email" type="email" placeholder="Email" required />

                <input name="Password" type="password" placeholder="Mật khẩu" required />

                <input name="ConfirmPassword" type="password" placeholder="Nhập lại mật khẩu" required />

                <button type="submit">Đăng ký</button>

                <div class="switch-text">
                    <span onclick="switchPopup('signupPopup', 'authPopup')" style="cursor: pointer; color: #0066B3;">
                        Đã có tài khoản? Đăng nhập
                    </span>
                </div>
                @* Optional: Display validation summary inside the popup *@
                @* <div asp-validation-summary="ModelOnly" class="text-danger mt-2"></div> *@
            </form>
        </div>
    </div>

    <!-- Main Content -->
    <div class="container-fluid pt-4">
        <div class="row gx-4">
            <!-- Main Content Area -->
            <div class="col-lg-8">
                <!-- Course Header -->
                <div class="d-flex align-items-center mb-3">
                    <div class="course-avatar me-3">
                        <img src="https://youpass.vn/upload/course/170_cover.png" alt="IELTS Writing Task 1" width="60" height="60" class="rounded">
                    </div>
                    <div class="course-title">
                        <h5 class="mb-1 text-success">IELTS Writing Task 1 - Aim 6.5/7.0++</h5>
                    
                    </div>
                </div>

                <!-- Course Progress Bar -->
                <div class="course-progress mb-4">
                    <div class="progress" style="height: 20px;">
                        <div class="progress-bar bg-success" role="progressbar"
                             style="width: @(Model.CourseProgress?.ProgressPercentage ?? 0)%;"
                             aria-valuenow="@(Model.CourseProgress?.ProgressPercentage ?? 0)"
                             aria-valuemin="0" aria-valuemax="100">
                            @Math.Round(Model.CourseProgress?.ProgressPercentage ?? 0, 1)%
                        </div>
                    </div>
                    <div class="d-flex justify-content-between mt-2">
                        <span>Bài học hoàn thành: @(Model.CourseProgress?.CompletedLessons ?? 0)/@(Model.CourseProgress?.TotalLessons ?? 0)</span>
                        <span>Bài kiểm tra hoàn thành: @(Model.CourseProgress?.CompletedQuizzes ?? 0)/@(Model.CourseProgress?.TotalQuizzes ?? 0)</span>
                    </div>
                </div>

                <!-- Video Player -->
                <div class="video-container rounded" id="videoPlayerSection">
                    <div class="video-info p-2 bg-light border-bottom">
                        <h5 id="currentVideoTitle" class="mb-0">Chọn bài học để xem</h5>
                    </div>
                    <video id="mainVideo" class="w-100">
                        <source src="" id="videoSource" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                    <div class="video-controls rounded-bottom">
                        <div class="progress-container">
                            <div class="progress-bar" id="progressBar"></div>
                        </div>
                        <div class="d-flex justify-content-between w-100">
                            <div class="control-buttons">
                                <button id="playPauseBtn" class="btn btn-sm btn-outline-light me-2">
                                    <i class="bi bi-play-fill"></i>
                                </button>
                                <span class="time-display">
                                    <span id="currentTime">00:00</span> / <span id="duration">00:00</span>
                                </span>
                            </div>
                            <div class="control-buttons">
                                <button id="muteBtn" class="btn btn-sm btn-outline-light me-2">
                                    <i class="bi bi-volume-up"></i>
                                </button>
                                <input type="range" id="volumeControl" class="form-range volume-control" min="0" max="1" step="0.1"
                                       value="1">
                                <button id="fullscreenBtn" class="btn btn-sm btn-outline-light ms-2">
                                    <i class="bi bi-fullscreen"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>


                <!-- Video Title -->
                <div class="d-flex align-items-center mb-4">
                    <div class="video-play-btn me-2">
                        <button class="btn btn-danger rounded-circle">
                            <i class="bi bi-play-fill"></i>
                        </button>
                    </div>
                    <h5 class="mb-0">Video: Tại sao Writing chậm tiến bộ</h5>
                    <a href="#" class="ms-auto text-primary d-flex align-items-center">
                        Bài tiếp theo <i class="bi bi-arrow-right ms-1"></i>
                    </a>
                </div>

                <!-- Comments Section -->
                <div class="comments-section mb-4">
                    <div class="d-flex align-items-center mb-3">
                        <span class="bg-success bg-opacity-10 text-success rounded-pill px-2 py-1 d-flex align-items-center">
                            <i class="bi bi-chat-left-text-fill me-1"></i>
                            <span class="fw-medium">8 Thảo luận</span>
                        </span>
                    </div>

                    <!-- Comment Input -->
                    <div class="comment-input d-flex mb-4">
                        <div class="me-2">
                            <span class="avatar-circle bg-warning rounded-circle d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                                <i class="bi bi-person-fill text-white"></i>
                            </span>
                        </div>
                        <div class="flex-grow-1 position-relative">
                            <input type="text" class="form-control bg-light" placeholder="Nhập thảo luận và bài viết">
                            <button class="btn position-absolute end-0 top-0 bottom-0">
                                <i class="bi bi-image"></i>
                            </button>
                        </div>
                    </div>

                    <!-- Comments List -->
                    <div class="comments-list">
                        <!-- Comment 1 -->
                        <div class="comment-item mb-4">
                            <div class="d-flex">
                                <div class="me-2">
                                    <span class="avatar-circle rounded-circle d-flex align-items-center justify-content-center bg-light" style="width: 40px; height: 40px;">
                                        <i class="bi bi-person-fill"></i>
                                    </span>
                                </div>
                                <div class="flex-grow-1">
                                    <div class="d-flex align-items-center mb-1">
                                        <h6 class="mb-0 fw-medium">Trần Thuý</h6>
                                        <small class="text-muted ms-2">2 tháng trước</small>
                                    </div>
                                    <p class="mb-2">Anh cho em hỏi ở các body thì có cần viết phần khai quát body đó trước khi mình viết chi tiết ko?</p>
                                    <div class="d-flex align-items-center">
                                        <button class="btn btn-sm btn-light me-2 d-flex align-items-center">
                                            <i class="bi bi-hand-thumbs-up me-1"></i> 0
                                        </button>
                                        <button class="btn btn-sm btn-light me-2 d-flex align-items-center">
                                            <i class="bi bi-chat me-1"></i> Phản hồi
                                        </button>
                                        <button class="btn btn-sm btn-light text-success d-flex align-items-center">
                                            <i class="bi bi-arrow-return-right me-1"></i> 1 Phản hồi
                                        </button>
                                    </div>
                                </div>  
                            </div>
                        </div>

                        <!-- Comment 2 -->
                        <div class="comment-item mb-4">
                            <div class="d-flex">
                                <div class="me-2">
                                    <span class="avatar-circle rounded-circle d-flex align-items-center justify-content-center bg-light" style="width: 40px; height: 40px;">
                                        <i class="bi bi-person-fill"></i>
                                    </span>
                                </div>
                                <div class="flex-grow-1">
                                    <div class="d-flex align-items-center mb-1">
                                        <h6 class="mb-0 fw-medium">Vũ Thanh Vân</h6>
                                        <span class="badge rounded-pill bg-primary ms-2 text-white">Giáo viên</span>
                                        <small class="text-muted ms-2">2 tháng trước</small>
                                    </div>
                                    <p class="mb-2"><span class="text-primary">Trần Thuý</span> Hello em, mình có cần thiết em nhé, vì phần khai quát đó đã được viết ở Overview rùi em => Chỉ gọi ý mở đầu các Body của mình em là một cụm Linking device để "dẫn" vào Body & thể hiện được cách group thông tin để chia đoạn của mình em nhé :> Chúc em học tốt nhen ^^</p>
                                    <div class="d-flex align-items-center">
                                        <button class="btn btn-sm btn-light me-2 d-flex align-items-center">
                                            <i class="bi bi-hand-thumbs-up me-1"></i> 0
                                        </button>
                                        <button class="btn btn-sm btn-light me-2 d-flex align-items-center">
                                            <i class="bi bi-chat me-1"></i> Phản hồi
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="col-lg-4">
                <div class="course-sidebar bg-white border rounded p-0">
                    <!-- Tabs -->
                    <ul class="nav nav-pills px-3 pt-3 pb-1" id="courseTab" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="all-tab" data-bs-toggle="pill" data-bs-target="#all" type="button" role="tab">All</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="video-tab" data-bs-toggle="pill" data-bs-target="#video" type="button" role="tab">
                                <i class="bi bi-play-circle"></i> Video
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="tailieu-tab" data-bs-toggle="pill" data-bs-target="#tailieu" type="button" role="tab">
                                <i class="bi bi-file-text"></i> Tài liệu
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="baitap-tab" data-bs-toggle="pill" data-bs-target="#baitap" type="button" role="tab">
                                <i class="bi bi-journal-text"></i> Bài tập
                            </button>
                        </li>
                    </ul>

                    <!-- Lessons Sections -->
                    <div class="px-3 pt-3">
                        <div class="mb-2 d-flex align-items-center">
                            <span class="text-success me-2 fw-medium">Intro</span>
                            <div class="d-flex">
                                <button class="btn btn-sm rounded-circle border me-1">1</button>
                                <button class="btn btn-sm rounded-circle border me-1">2</button>
                                <button class="btn btn-sm rounded-circle border me-1">3</button>
                                <button class="btn btn-sm rounded-circle border me-1">4</button>
                                <button class="btn btn-sm rounded-circle border me-1">5</button>
                                <button class="btn btn-sm rounded-circle border me-1">6</button>
                                <button class="btn btn-sm rounded-circle border me-1">7</button>
                                <button class="btn btn-sm rounded-circle border me-1">8</button>
                            </div>
                        </div>

                        <!-- Course List Section -->
                        @foreach (var courseSection in Model.Course.Sections)
        {
            var isFirstSection = courseSection == Model.Course.Sections.FirstOrDefault();
            
            <div class="accordion mb-3">
                <div class="accordion-item border-0">
                    <h2 class="accordion-header">
                        <button class="accordion-button fw-medium @(isFirstSection ? "" : "collapsed")" type="button" 
                                data-bs-toggle="collapse" data-bs-target="#section-@courseSection.SectionId">
                            @courseSection.Title
                        </button>
                    </h2>
                    <div id="section-@courseSection.SectionId" class="accordion-collapse collapse @(isFirstSection ? "show" : "")">
                        <div class="accordion-body p-0">
                            <div class="accordion">
                                @foreach (var lesson in courseSection.Lessons)
                                {
                                    var isFirstLesson = lesson == courseSection.Lessons.FirstOrDefault();
                                    
                                    <div class="accordion-item border-0">
                                        <h2 class="accordion-header">
                                            <button class="accordion-button fw-medium @(isFirstLesson && isFirstSection ? "" : "collapsed")" 
                                                    type="button" data-bs-toggle="collapse" 
                                                    data-bs-target="#lesson-@lesson.LessonId">
                                                @lesson.Title
                                            </button>
                                        </h2>
                                        <div id="lesson-@lesson.LessonId" 
                                             class="accordion-collapse collapse @(isFirstLesson && isFirstSection ? "show" : "")">
                                            <div class="accordion-body p-2">
                                                                @if (!string.IsNullOrEmpty(lesson.VideoUrl))
                                                                {
                                                                    <div class="lesson-item bg-light rounded mb-2 p-2 video-link @(Model.CompletedLessonIds.ContainsKey(lesson.LessonId) ? "completed" : "")"
                                                                         data-video-url="@lesson.VideoUrl"
                                                                         data-video-title="@lesson.Title"
                                                                         data-lesson-id="@lesson.LessonId">
                                                                        <div class="d-flex">
                                                                            <div class="video-thumbnail position-relative me-2">
                                                                                <img src="/images/bootstrap-logo.png" alt="@lesson.Title" width="60" height="60" class="rounded">
                                                                                <div class="play-icon position-absolute top-50 start-50 translate-middle">
                                                                                    <i class="bi bi-play-circle-fill text-danger"></i>
                                                                                </div>
                                                                            </div>
                                                                            <div class="flex-grow-1">
                                                                                <h6 class="mb-1 fw-medium">Video:</h6>
                                                                                <p class="mb-0">@lesson.Title</p>
                                                                            </div>
                                                                            <div class="d-flex align-items-center">
                                                                                <span class="badge bg-secondary">@lesson.Duration phút</span>
                                                                                @if (Model.CompletedLessonIds.ContainsKey(lesson.LessonId))
                                                                                {
                                                                                    <span class="badge bg-success ms-2">
                                                                                        <i class="bi bi-check-circle-fill"></i> Hoàn thành
                                                                                    </span>
                                                                                }
                                                                                else
                                                                                {
                                                                                    <button type="button" class="btn btn-sm btn-outline-success ms-2 mark-complete-btn"
                                                                                            data-lesson-id="@lesson.LessonId">
                                                                                        Đánh dấu hoàn thành
                                                                                    </button>
                                                                                }
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                }

                                   @*           @if (!string.IsNullOrEmpty(lesson.Content))
                                                {
                                                    <div class="lesson-content mt-3">
                                                        @Html.Raw(lesson.Content)
                                                    </div>
                                                }
                                                
                                                @if (!string.IsNullOrEmpty(lesson.AttachmentUrl))
                                                {
                                                    <div class="lesson-attachment mt-3">
                                                        <a href="@lesson.AttachmentUrl" class="btn btn-outline-primary btn-sm">
                                                            <i class="bi bi-download me-1"></i> Tải tài liệu
                                                        </a>
                                                    </div>
                                                } *@
                                                            </div>
                                        </div>
                                    </div>
                                } 
                                                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
   
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Use CDN for Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>


    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
  
    <!-- Custom JS -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
        const video = document.getElementById('mainVideo');
        const videoSource = document.getElementById('videoSource');
        const playPauseBtn = document.getElementById('playPauseBtn');
        const muteBtn = document.getElementById('muteBtn');
        const volumeControl = document.getElementById('volumeControl');
        const fullscreenBtn = document.getElementById('fullscreenBtn');
        const progressBar = document.getElementById('progressBar');
        const currentTimeDisplay = document.getElementById('currentTime');
        const durationDisplay = document.getElementById('duration');
        const currentVideoTitle = document.getElementById('currentVideoTitle');
     

         // Video link elements
        const videoLinks = document.querySelectorAll('.video-link');

         // Mark complete buttons
        const markCompleteButtons = document.querySelectorAll('.mark-complete-btn');

        // Dictionary to track video progress
        const videoProgress = {};

        // Video completion threshold (95%)
        const completionThreshold = 0.95;

        // Set the first video URL if available
        const firstVideoLink = document.querySelector('.video-link');
        if (firstVideoLink) {
            const videoUrl = firstVideoLink.getAttribute('data-video-url');
            const videoTitle = firstVideoLink.getAttribute('data-video-title');
            videoSource.src = videoUrl;
            if (currentVideoTitle) {
                currentVideoTitle.textContent = videoTitle;
            }
            video.load();
        }

        // Add click event listener to all video links
        videoLinks.forEach(link => {
            link.addEventListener('click', function() {
                const videoUrl = this.getAttribute('data-video-url');
                const videoTitle = this.getAttribute('data-video-title');
                const lessonId = this.getAttribute('data-lesson-id');

                // Update video source and reload
                videoSource.src = videoUrl;
                if (currentVideoTitle) {
                    currentVideoTitle.textContent = videoTitle;
                }
                video.load();

                // Restore progress if available
                if (videoProgress[videoUrl]) {
                    video.addEventListener('loadedmetadata', function onceLoaded() {
                        video.currentTime = videoProgress[videoUrl].currentTime;
                        video.removeEventListener('loadedmetadata', onceLoaded);
                    }, { once: true });
                }

                // Auto play after loading
                video.onloadeddata = function() {
                    video.play();
                    updatePlayPauseIcon();
                };
            });
        });

       // Add click event listener to mark complete buttons
        markCompleteButtons.forEach(button => {
            button.addEventListener('click', function() {
                const lessonId = this.getAttribute('data-lesson-id');
                markLessonComplete(lessonId);
            });
        });

        // Track video progress for auto-completion
        video.addEventListener('timeupdate', function() {
            const currentUrl = videoSource.src;
            const currentTime = video.currentTime;
            const duration = video.duration;

            // Store progress for this video
            videoProgress[currentUrl] = {
                currentTime: currentTime,
                duration: duration
            };

            // Check if video has passed completion threshold
            if (currentTime / duration > completionThreshold) {
                const activeVideoLink = findVideoLinkByUrl(currentUrl);
                if (activeVideoLink && !activeVideoLink.classList.contains('completed')) {
                    const lessonId = activeVideoLink.getAttribute('data-lesson-id');
                    markLessonComplete(lessonId);
                }
            }
        });

        // Auto mark complete when video ends
        video.addEventListener('ended', function() {
            playPauseBtn.querySelector('i').className = 'bi bi-play-fill';

            const currentUrl = videoSource.src;
            const activeVideoLink = findVideoLinkByUrl(currentUrl);

            if (activeVideoLink && !activeVideoLink.classList.contains('completed')) {
                const lessonId = activeVideoLink.getAttribute('data-lesson-id');
                markLessonComplete(lessonId);
            }
        });

        // Play/Pause functionality
            playPauseBtn.addEventListener('click', function() {
                if (video.paused) {
                    video.play();
                } else {
                    video.pause();
                }
                updatePlayPauseIcon();
            });

        // Update play/pause icon
            function updatePlayPauseIcon() {
                const icon = playPauseBtn.querySelector('i');
                if (video.paused) {
                    icon.className = 'bi bi-play-fill';
                } else {
                    icon.className = 'bi bi-pause-fill';
                }
            }

        // Mute/Unmute functionality
            muteBtn.addEventListener('click', function() {
                video.muted = !video.muted;
                updateMuteIcon();

                // Update volume control
                if (video.muted) {
                    volumeControl.value = 0;
                } else {
                    volumeControl.value = video.volume;
                }
            });

        // Update mute icon
            function updateMuteIcon() {
                const icon = muteBtn.querySelector('i');
                if (video.muted || video.volume === 0) {
                    icon.className = 'bi bi-volume-mute';
                } else if (video.volume < 0.5) {
                    icon.className = 'bi bi-volume-down';
                } else {
                    icon.className = 'bi bi-volume-up';
                }
            }

        // Volume control
            volumeControl.addEventListener('input', function() {
                video.volume = this.value;
                video.muted = (this.value === 0);
                updateMuteIcon();
            });

        // Fullscreen functionality
            fullscreenBtn.addEventListener('click', function() {
                if (video.requestFullscreen) {
                    video.requestFullscreen();
                } else if (video.webkitRequestFullscreen) { /* Safari */
                    video.webkitRequestFullscreen();
                } else if (video.msRequestFullscreen) { /* IE11 */
                    video.msRequestFullscreen();
                }
            });

        // Update progress bar
            video.addEventListener('timeupdate', function() {
                const progress = (video.currentTime / video.duration) * 100;
                progressBar.style.width = progress + '%';

                // Update time display
                currentTimeDisplay.textContent = formatTime(video.currentTime);
                durationDisplay.textContent = formatTime(video.duration);
            });

        // Click on progress bar to seek
            document.querySelector('.progress-container').addEventListener('click', function(e) {
                const percent = (e.offsetX / this.offsetWidth);
                video.currentTime = percent * video.duration;
            });

        // Format time in MM:SS
            function formatTime(seconds) {
                if (isNaN(seconds)) return "00:00";

                const minutes = Math.floor(seconds / 60);
                const remainingSeconds = Math.floor(seconds % 60);

                return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
            }

        // Update duration display when metadata is loaded
            video.addEventListener('loadedmetadata', function() {
                durationDisplay.textContent = formatTime(video.duration);
            });

        // Helper function to find video link by URL
            function findVideoLinkByUrl(url) {
                for (let link of videoLinks) {
                    if (link.getAttribute('data-video-url') === url) {
                        return link;
                    }
                }
                return null;
            }

         // Function to mark lesson as complete using AJAX
                 function markLessonComplete(lessonId) {
            // Create a fetch request to mark the lesson as complete without page reload
            fetch('/UsersCourse/MarkLessonComplete', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: `lessonId=${lessonId}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Find the lesson item and mark it as completed in the UI
                    const videoLink = document.querySelector(`.video-link[data-lesson-id="${lessonId}"]`);
                    if (videoLink) {
                        videoLink.classList.add('completed');

                        // Find and update the badge
                        const completeBtn = videoLink.querySelector('.mark-complete-btn');
                        if (completeBtn) {
                            const parent = completeBtn.parentElement;
                            completeBtn.remove();

                            // Create completed badge
                            const completedBadge = document.createElement('span');
                            completedBadge.className = 'badge bg-success ms-2';
                            completedBadge.innerHTML = '<i class="bi bi-check-circle-fill"></i> Hoàn thành';
                            parent.appendChild(completedBadge);
                        }

                        // Update the progress bar with the new data
                        updateCourseProgressUI(data.progressData);
                    }
                }
            })
            .catch(error => {
                console.error('Error marking lesson as complete:', error);
            });
        }

        // Function to update the course progress UI elements
        function updateCourseProgressUI(progressData) {
            if (!progressData) return;

            // Update the progress bar
            const progressBar = document.querySelector('.course-progress .progress-bar');
            if (progressBar) {
                const percentage = progressData.progressPercentage || 0;
                progressBar.style.width = percentage + '%';
                progressBar.setAttribute('aria-valuenow', percentage);
                progressBar.textContent = Math.round(percentage * 10) / 10 + '%';
            }

            // Update completed lessons text
            const lessonsCompletedSpan = document.querySelector('.course-progress span:first-child');
            if (lessonsCompletedSpan && progressData.completedLessons !== undefined && progressData.totalLessons !== undefined) {
                lessonsCompletedSpan.textContent = `Bài học hoàn thành: ${progressData.completedLessons}/${progressData.totalLessons}`;
            }

            // Update completed quizzes text if applicable
            const quizzesCompletedSpan = document.querySelector('.course-progress span:last-child');
            if (quizzesCompletedSpan && progressData.completedQuizzes !== undefined && progressData.totalQuizzes !== undefined) {
                quizzesCompletedSpan.textContent = `Bài kiểm tra hoàn thành: ${progressData.completedQuizzes}/${progressData.totalQuizzes}`;
            }
        }

            // ACCORDION FIX - NEW ADDITION
        // Fix for nested accordions
        const accordionElements = document.querySelectorAll('.accordion-collapse');

        accordionElements.forEach(element => {
            // Add event listeners for Bootstrap's built-in collapse events
            element.addEventListener('hide.bs.collapse', function() {
                // Find the button that controls this element
                const button = document.querySelector(`[data-bs-target="#${this.id}"]`);
                if (button) {
                    button.classList.add('collapsed');
                }
            });

            element.addEventListener('show.bs.collapse', function() {
                // Find the button that controls this element
                const button = document.querySelector(`[data-bs-target="#${this.id}"]`);
                if (button) {
                    button.classList.remove('collapsed');
                }
            });
        });

        // Prevent parent collapse from triggering when clicking on child accordion buttons
        const innerAccordionButtons = document.querySelectorAll('.accordion .accordion .accordion-button');
        innerAccordionButtons.forEach(button => {
            button.addEventListener('click', function(e) {
                // Stop event from bubbling up to parent accordion elements
                e.stopPropagation();
            });
        });

        
        });
            
    </script>


</body>
</html>
